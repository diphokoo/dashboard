"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _eventHandler = _interopRequireDefault(require("../dom/event-handler"));

var _selectorEngine = _interopRequireDefault(require("../dom/selector-engine"));

var _config = _interopRequireDefault(require("./config"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Constants
 */
var NAME = 'focustrap';
var DATA_KEY = 'bs.focustrap';
var EVENT_KEY = ".".concat(DATA_KEY);
var EVENT_FOCUSIN = "focusin".concat(EVENT_KEY);
var EVENT_KEYDOWN_TAB = "keydown.tab".concat(EVENT_KEY);
var TAB_KEY = 'Tab';
var TAB_NAV_FORWARD = 'forward';
var TAB_NAV_BACKWARD = 'backward';
var Default = {
  autofocus: true,
  trapElement: null // The element to trap focus inside of

};
var DefaultType = {
  autofocus: 'boolean',
  trapElement: 'element'
};
/**
 * Class definition
 */

var FocusTrap =
/*#__PURE__*/
function (_Config) {
  _inherits(FocusTrap, _Config);

  function FocusTrap(config) {
    var _this;

    _classCallCheck(this, FocusTrap);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FocusTrap).call(this));
    _this._config = _this._getConfig(config);
    _this._isActive = false;
    _this._lastTabNavDirection = null;
    return _this;
  } // Getters


  _createClass(FocusTrap, [{
    key: "activate",
    // Public
    value: function activate() {
      var _this2 = this;

      if (this._isActive) {
        return;
      }

      if (this._config.autofocus) {
        this._config.trapElement.focus();
      }

      _eventHandler["default"].off(document, EVENT_KEY); // guard against infinite focus loop


      _eventHandler["default"].on(document, EVENT_FOCUSIN, function (event) {
        return _this2._handleFocusin(event);
      });

      _eventHandler["default"].on(document, EVENT_KEYDOWN_TAB, function (event) {
        return _this2._handleKeydown(event);
      });

      this._isActive = true;
    }
  }, {
    key: "deactivate",
    value: function deactivate() {
      if (!this._isActive) {
        return;
      }

      this._isActive = false;

      _eventHandler["default"].off(document, EVENT_KEY);
    } // Private

  }, {
    key: "_handleFocusin",
    value: function _handleFocusin(event) {
      var trapElement = this._config.trapElement;

      if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {
        return;
      }

      var elements = _selectorEngine["default"].focusableChildren(trapElement);

      if (elements.length === 0) {
        trapElement.focus();
      } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {
        elements[elements.length - 1].focus();
      } else {
        elements[0].focus();
      }
    }
  }, {
    key: "_handleKeydown",
    value: function _handleKeydown(event) {
      if (event.key !== TAB_KEY) {
        return;
      }

      this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
    }
  }], [{
    key: "Default",
    get: function get() {
      return Default;
    }
  }, {
    key: "DefaultType",
    get: function get() {
      return DefaultType;
    }
  }, {
    key: "NAME",
    get: function get() {
      return NAME;
    }
  }]);

  return FocusTrap;
}(_config["default"]);

var _default = FocusTrap;
exports["default"] = _default;